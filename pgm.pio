.program pgm
idle:
in pins, 4
mov y isr
jmp !y idle
waiting:
in pins, 4
mov x isr
jmp !x interrupt
jmp waiting
interrupt:
mov isr y
push ;noblock
irq 0


% c-sdk {
static inline void pgm_program_init(PIO pio, uint sm, uint offset, uint base, uint npin) {
  pio_sm_config c = pgm_program_get_default_config(offset);
  sm_config_set_in_pins(&c, base);
  for (uint pin = base; pin < base + npin; pin++) {
    pio_gpio_init(pio, pin);
    gpio_pull_down(pin);
  }
  pio_sm_set_consecutive_pindirs(pio, sm, base, npin, false);
  float div = (float)clock_get_hz(clk_sys) / 1;
  sm_config_set_clkdiv(&c, div);
  sm_config_set_in_shift(&c, false, false, 0);
  pio_sm_init(pio, sm, offset, &c);
  pio_sm_set_enabled(pio, sm, true);
}

static inline int setup_pgm(uint start_pin, void (*on_pgm)(void))  {
  const uint offset = pio_add_program(pio1, &pgm_program);
  const int sm = pio_claim_unused_sm(pio1, true);
  pio_set_irq1_source_enabled(pio1, sm, true);
  irq_set_exclusive_handler(PIO1_IRQ_0, on_pgm);
  irq_set_enabled(PIO1_IRQ_0, true);
  pio1_hw->inte0 = PIO_IRQ0_INTE_SM0_BITS | PIO_IRQ0_INTE_SM1_BITS;
  pgm_program_init(pio1, sm, offset, start_pin, 4);
  return sm;
}

%}
